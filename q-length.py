from this import d
from tkinter import E
from manim import *
from numpy import sqrt




class ticu(Scene):
    def construct(self):
        t1 = Text("Curves", font_size=60)
        self.play(Write(t1))
        self.wait()        

class tile(Scene):
    def construct(self):
        t1 = Text("Length", font_size=60)
        self.play(Write(t1))
        self.wait()        


class de(Scene):
    def construct(self):
        ax = Axes(x_range = [-3,3], y_range = [-3,3]).scale((0.4)*RIGHT+(0.6)*UP).shift(4*RIGHT+UP)
        t= Tex(r"$t$", font_size = 45).move_to((1.7)*LEFT+(1.4)*UP)
        line = NumberLine(x_range = [-3,3, 1],include_tip=True, tip_width = 0.2, tip_height = 0.2).scale(0.65).shift(4*LEFT+UP)
        ar = CurvedArrow(LEFT+(1.5)*UP, RIGHT+(1.5)*UP, radius = -3, tip_length = 0.2)
        gam = Tex(r"$\gamma$", font_size=58).next_to(ar,UP)
        dom = Line([-5.3,1, 0], [-3.1,1, 0], color = BLUE).set_height(0.2)
        d0 = Line([-5.3,1.1,0], [-5.3,0.9,0], color = BLUE)
        d1 = Line([-3.1,1.1,0], [-3.1,0.9,0], color = BLUE)
        al = Tex(r"$a$", font_size = 44).next_to(d0, UP)
        bl = Tex(r"$b$", font_size = 44).next_to(d1, UP)
        sp = ParametricFunction(lambda t : [4+(0.8)*t,(t-2)*t*(t+2)/8+t/4+5/4,0], t_range = [-2,2], color = BLUE)
        e1 = Dot(sp.get_start(), color = BLUE)
        e2 = Dot(sp.get_end(), color = BLUE)
        self.play(FadeIn(ax), FadeIn(t), FadeIn(al), FadeIn(bl),FadeIn(line), Create(dom), Create(d0), Create(d1), Create(ar),Write(gam), Create(sp), Create(e1), Create(e2), run_time=2)
        self.wait()
        l1 = Line(sp.get_start(), sp.get_end(), color = RED) 
        l3 = Line(sp.get_start(), sp.point_from_proportion(1/3)).append_points(Line( sp.point_from_proportion(1/3),  sp.point_from_proportion(2/3)).points)
        l3.append_points(Line( sp.point_from_proportion(2/3),  sp.point_from_proportion(1)).points).set_color(ORANGE)
        l4 = Line(sp.get_start(), sp.point_from_proportion(0.25)).append_points(Line( sp.point_from_proportion(0.25),  sp.point_from_proportion(0.5)).points).append_points(Line( sp.point_from_proportion(0.5),  sp.point_from_proportion(0.75)).points).append_points(Line( sp.point_from_proportion(0.75),  sp.point_from_proportion(1)).points)
        l4.set_color(YELLOW)
        l6 = Line(sp.get_start(), sp.point_from_proportion(1/6)).append_points(Line( sp.point_from_proportion(1/6),  sp.point_from_proportion(1/3)).points)
        l6.append_points(Line( sp.point_from_proportion(1/3),  sp.point_from_proportion(0.5)).points).append_points(Line( sp.point_from_proportion(0.5),  sp.point_from_proportion(2/3)).points)
        l6.append_points(Line( sp.point_from_proportion(2/3),  sp.point_from_proportion(5/6)).points).append_points(Line( sp.point_from_proportion(5/6),  sp.point_from_proportion(1)).points)
        l6.set_color(GREEN)
        l9 = Line(sp.get_start(), sp.point_from_proportion(1/9)).append_points(Line( sp.point_from_proportion(1/9),  sp.point_from_proportion(2/9)).points)
        l9.append_points(Line( sp.point_from_proportion(2/9),  sp.point_from_proportion(1/3)).points)
        l9.append_points(Line( sp.point_from_proportion(1/3),  sp.point_from_proportion(4/9)).points)
        l9.append_points(Line( sp.point_from_proportion(4/9),  sp.point_from_proportion(5/9)).points)
        l9.append_points(Line( sp.point_from_proportion(5/9),  sp.point_from_proportion(2/3)).points)
        l9.append_points(Line( sp.point_from_proportion(2/3),  sp.point_from_proportion(7/9)).points)
        l9.append_points(Line( sp.point_from_proportion(7/9),  sp.point_from_proportion(8/9)).points)
        l9.append_points(Line( sp.point_from_proportion(8/9),  sp.point_from_proportion(1)).points).set_color(GREEN)
        d10 = d0.copy().set_color(RED)
        d11 = d10.copy().shift((2.2)*RIGHT)
        self.play(Create(l1), FadeIn(d10), FadeIn(d11))
        self.wait()
        d30 = d0.copy().set_color(ORANGE)
        d31 = d30.copy().shift((2.2/3)*RIGHT)
        d32 = d31.copy().shift((2.2/3)*RIGHT)
        d33 = d32.copy().shift((2.2/3)*RIGHT)
        d3 = Group (d30, d31, d32, d33)
        self.play(Transform(l1,l3), FadeOut(d10), FadeOut(d11), FadeIn(d3))
        self.wait()
        d40 = d0.copy().set_color(YELLOW)
        d41 = d40.copy().shift((2.2/4)*RIGHT)
        d42 = d41.copy().shift((2.2/4)*RIGHT)
        d43 = d42.copy().shift((2.2/4)*RIGHT)
        d44 = d43.copy().shift((2.2/4)*RIGHT)
        d4 = Group (d40, d41, d42, d43, d44)
        self.play(Transform(l1,l4), FadeOut(d3), FadeIn(d4))
        self.wait()
        d60 = d0.copy().set_color(GREEN)
        d61 = d60.copy().shift((2.2/6)*RIGHT)
        d62 = d61.copy().shift((2.2/6)*RIGHT)
        d63 = d62.copy().shift((2.2/6)*RIGHT)
        d64 = d63.copy().shift((2.2/6)*RIGHT)
        d65 = d64.copy().shift((2.2/6)*RIGHT)
        d66 = d65.copy().shift((2.2/6)*RIGHT)
        d6 = Group (d60, d61, d62, d63, d64, d65, d66)
        self.play(Transform(l1,l6), FadeOut(d4), FadeIn(d6))
        self.wait()
        d90 = d0.copy().set_color(GREEN)
        d91 = d90.copy().shift((2.2/9)*RIGHT)
        d92 = d91.copy().shift((2.2/9)*RIGHT)
        d93 = d92.copy().shift((2.2/9)*RIGHT)
        d94 = d93.copy().shift((2.2/9)*RIGHT)
        d95 = d94.copy().shift((2.2/9)*RIGHT)
        d96 = d95.copy().shift((2.2/9)*RIGHT)
        d97 = d96.copy().shift((2.2/9)*RIGHT)
        d98 = d97.copy().shift((2.2/9)*RIGHT)
        d99 = d98.copy().shift((2.2/9)*RIGHT)
        d9 = Group (d90, d91, d92, d93, d94, d95, d96, d97, d98, d99)
        self.play(Transform(l1,l9),FadeOut(d6), FadeIn(d9))
        form =  Tex(r"length$(\gamma ) =$ $ \sup$ $ \sum_{j=1}^k \vert \gamma (t_j) - \gamma(t_{j-1}) \vert$", font_size=40).shift((1.6)*DOWN)
        supremo = Tex(r"$a = t_0 < \ldots < t_k = b $",font_size = 20).next_to(form,(0.7)* DOWN )
        supremo.shift(0.9*LEFT)
        box = SurroundingRectangle(form, buff = .3, color = GREEN)
        box.shift(0.2*DOWN)
        self.play(Write(form), Write(supremo))
        self.wait()
        self.play(Create(box))



class p0(Scene):
    def construct(self):
        ar = CurvedArrow(LEFT+(1.5)*UP, RIGHT+(1.5)*UP, radius = -3, tip_length = 0.2)
        gam = Tex(r"$\gamma$", font_size=58).next_to(ar,UP)
        dom = Line([-5.3,1, 0], [-3.1,1, 0], color = BLUE).set_height(0.2)
        d0 = Line([-5.3,1.1,0], [-5.3,0.9,0], color = BLUE)
        d1 = Line([-3.1,1.1,0], [-3.1,0.9,0], color = BLUE)
        al = Tex(r"$a$", font_size = 44).next_to(d0, UP)
        bl = Tex(r"$b$", font_size = 44).next_to(d1, UP)
        sp = ParametricFunction(lambda t : [4+(0.8)*t,(t-2)*t*(t+2)/8+t/4+5/4,0], t_range = [-2,2], color = BLUE)
        e1 = Dot(sp.get_start(), color = BLUE)
        e2 = Dot(sp.get_end(), color = BLUE)
        gal = Tex(r"$\gamma (a)$", font_size = 44).next_to(e1, DOWN)
        gbl = Tex(r"$\gamma (b)$", font_size = 44).next_to(e2, UP)
        self.play(FadeIn(al), FadeIn(bl), Create(dom), Create(d0), Create(d1), FadeIn(gal), FadeIn(gbl) , Create(ar), Write(gam), Create(sp), Create(e1), Create(e2), run_time=2)
        self.wait()
        l1 = Line(sp.get_start(), sp.get_end(), color = RED) 
        self.play(Create(l1))
        self.wait()
        form =  Tex(r"length$(\gamma ) \geq \vert \gamma (b) - \gamma (a) \vert$", font_size=40).shift((1.6)*DOWN)
        box = SurroundingRectangle(form, buff = .15, color = RED)
        self.play(Write(form))
        self.wait()
        self.play(Create(box))



        
class p1(Scene):
    def construct(self):        
        ar1 = Arrow((1.5)*LEFT+(2.5)*UP, (1.5)* RIGHT +(1.5)*UP , tip_length = 0.2)
        ar2 = Arrow((1.5)*LEFT+(0.5)*DOWN, (1.5)* RIGHT + (0.5)*UP , tip_length = 0.2)
        gam1 = Tex(r"$\gamma_1$", font_size=58).next_to(ar1,UP)
        gam2 = Tex(r"$\gamma_2$", font_size=58).next_to(ar2,DOWN)
        dom1 = Line([-5.3,2.5, 0], [-3.1,2.5, 0], color = BLUE).set_height(0.2)
        dom2 = Line([-5.3,-0.5, 0], [-3.1,-0.5, 0], color = GREEN).set_height(0.2)
        d10 = Line([-5.3,2.6,0], [-5.3, 2.4,0], color = BLUE)
        d11 =  Line([-3.1,2.6,0], [-3.1, 2.4,0], color = BLUE)
        d20 =  Line([-5.3,-0.6,0], [-5.3, -0.4,0], color = GREEN)
        d21 =  Line([-3.1,-0.6,0], [-3.1, -0.4,0], color = GREEN)
        v = Arrow(4*LEFT + 2*UP, 4*LEFT , tip_length = 0.2)
        phi = Tex(r"$\phi$", font_size=58).next_to(v,RIGHT)
        sp = ParametricFunction(lambda t : [4+(0.8)*t,(t-2)*t*(t+2)/8+t/4+1,0], t_range = [-2,2])        
        self.play(Create(v), Write(phi),Create(ar1), Create(ar2),Write(gam1), Write(gam2),Create(dom1),Create(dom2), Create(d10),Create(d11), Create(d20), Create(d21), FadeIn(sp))
        self.wait()
        d60 = d10.copy().set_color(YELLOW)
        d61 = d60.copy().shift((2.2/6)*RIGHT)
        d62 = d61.copy().shift((2.2/6)*RIGHT)
        d63 = d62.copy().shift((2.2/6)*RIGHT)
        d64 = d63.copy().shift((2.2/6)*RIGHT)
        d65 = d64.copy().shift((2.2/6)*RIGHT)
        d66 = d65.copy().shift((2.2/6)*RIGHT)
        d6 = Group (d60, d61, d62, d63, d64, d65, d66)
        d6phi = d6.copy().shift(3*DOWN)
        d6phi[1].shift(0.05*RIGHT)
        d6phi[2].shift(0.05*LEFT)
        d6phi[3].shift(0.05*LEFT)
        d6phi[5].shift(0.05*RIGHT)
        d6g0 = Dot(sp.point_from_proportion(0)).set_color(YELLOW)
        d6g1 = Dot(sp.point_from_proportion(1/6)).set_color(YELLOW)
        d6g2 = Dot(sp.point_from_proportion(1/3)).set_color(YELLOW)
        d6g3 = Dot(sp.point_from_proportion(1/2)).set_color(YELLOW)
        d6g4 = Dot(sp.point_from_proportion(2/3)).set_color(YELLOW)
        d6g5 = Dot(sp.point_from_proportion(5/6)).set_color(YELLOW)
        d6g6 = Dot(sp.point_from_proportion(1)).set_color(YELLOW)
        d6g = Group(d6g0, d6g1, d6g2, d6g3, d6g4, d6g5, d6g6)
        self.play(Create(d6[0]),Create(d6[1]),Create(d6[2]),Create(d6[3]),Create(d6[4]),Create(d6[5]),Create(d6[6]) )
        self.wait()
        self.play(Transform(d6[0], d6phi[0]), Transform(d6[1], d6phi[1]), Transform(d6[2], d6phi[2]), Transform(d6[3], d6phi[3]), Transform(d6[4], d6phi[4]), Transform(d6[5], d6phi[5]), Transform(d6[6], d6phi[6]))
        self.wait()
        self.play(Transform(d6[0], d6g[0]), Transform(d6[1], d6g[1]), Transform(d6[2], d6g[2]), Transform(d6[3], d6g[3]), Transform(d6[4], d6g[4]), Transform(d6[5], d6g[5]), Transform(d6[6], d6g[6]))
        self.wait() 
        form =  Tex(r"length$(\gamma_1 ) = $ length$(\gamma_2)$", font_size=50).shift((2.6)*DOWN)
        box = SurroundingRectangle(form, buff = .15, color = YELLOW)
        self.play(Write(form))
        self.wait()
        self.play(Create(box))
        self.wait()
        


class p2(Scene):
    def construct(self):        
        ar1 = Arrow((2.5)*LEFT+(2.5)*UP, (1.5)* LEFT  , tip_length = 0.2)
        ar2 = Arrow((2.5)*RIGHT+(2.5)*UP, (1.5)* RIGHT  , tip_length = 0.2)
        ar3 = Arrow((2.5)*UP, [0,0,0], tip_length = 0.1)
        conc = Tex(r"$\gamma_1 \ast \gamma_2$", font_size=58).next_to(ar3,RIGHT)
        gam1 = Tex(r"$\gamma_1$", font_size=58).next_to(ar1,LEFT)
        gam2 = Tex(r"$\gamma_2$", font_size=58).next_to(ar2,RIGHT)
        dom1 = Line([-4.5,3, 0], [-1.5,3, 0], color = BLUE).set_height(0.2)
        dom2 = Line([4.5,3, 0], [1.5,3, 0], color = GREEN).set_height(0.2)
        d10 = Line([-4.5,2.9,0], [-4.5,3.1,0], color = BLUE)
        d11 =  Line([-1.5,2.9,0], [-1.5, 3.1,0], color = BLUE)
        d20 =  Line([1.5,2.9,0], [1.5, 3.1,0], color = GREEN)
        d21 =  Line([4.5,2.9,0], [4.5, 3.1,0], color = GREEN)
        sp1 = ParametricFunction(lambda t : [(0.8)*t-1.6,(t-2)*t*(t+2)/8+t/4-1,0], t_range = [-2,2], color = BLUE)
        sp2 = ParametricFunction(lambda t : [(0.8)*t, ((t-2)**2)/4 -1.5 ,0], t_range = [0,4], color = GREEN)        
        self.play(Create(ar1), Create(ar2),Write(gam1), Write(gam2),Create(dom1),Create(dom2), Create(d10),Create(d11), Create(d20), Create(d21), FadeIn(sp1), FadeIn(sp2))
        self.wait()
        self.play(ar1.animate.shift((1.5)*RIGHT), ar2.animate.shift((1.5)*LEFT), FadeOut(gam1), FadeOut(gam2), dom1.animate.shift((1.5)*RIGHT), d10.animate.shift((1.5)*RIGHT), d11.animate.shift((1.5)*RIGHT), dom2.animate.shift((1.5)*LEFT), d20.animate.shift((1.5)*LEFT), d21.animate.shift((1.5)*LEFT),  Transform(ar1, ar3), Transform(ar2, ar3), FadeIn(conc))
        self.wait()
        form =  Tex(r"length$(\gamma_1 \ast \gamma_2 ) = $ length$(\gamma_1) +$ length$( \gamma_2 )$", font_size=50).shift(3*DOWN)
        box = SurroundingRectangle(form, buff = .1, color = BLUE)
        box2 = SurroundingRectangle(form, buff = .2, color = GREEN)
        self.play(Write(form))
        self.wait()
        self.play(Create(box), Create(box2))
        self.wait()
        


class p3(Scene):
    def construct(self):        
        ax = Axes(x_range = [-3,3], y_range = [-3,3]).scale((0.3)*RIGHT+(0.45)*UP).shift(4*RIGHT+(2.5)*UP)
        ar = Arrow((1.5)*LEFT + (2.5)*UP, (1.5)* RIGHT+(2.5)*UP, tip_length = 0.2)
        ar2 = Arrow([4,1,0], [4,-1,0], tip_length = 0.2)
        gam = Tex(r"$\gamma$", font_size=58).next_to(ar,UP)
        tlab = Tex(r"$T$", font_size=58).next_to(ar2,RIGHT)
        dom = Line([-5.3,2.5, 0], [-2.5,2.5, 0], color = BLUE).set_height(0.2)
        d0 = Line([-5.3,2.4,0], [-5.3,2.6,0], color = BLUE)
        d1 = Line([-2.5,2.4,0], [-2.5,2.6,0], color = BLUE)
        sp = ParametricFunction(lambda t : [4+(0.7)*t,(t-2)*t*(t+2)/8+t/4+2.5,0], t_range = [-2,2], color = BLUE)
        sp1 = sp.copy()
        sp2 = sp.copy()
        ax2 = ax.copy()
        new = Group(ax2, sp2).shift((5.2)*DOWN)
        new[1].rotate(PI/6).shift((0.3)*LEFT + (0.2)*UP)
        self.play(FadeIn(ax), Create(dom),Create(d0), Create(d1), Create(ar),Write(gam), Create(sp) )
        self.wait()
        self.play(Write(tlab),Create(ar2),  Create(new[0]), run_time=2)
        self.wait()
        self.play(Transform(sp1, sp2))
        self.wait() 
        ar3 = Arrow([-2,1,0], [2,-1.5,0], tip_length = 0.2)
        comp = Tex(r"$T \circ \gamma$", font_size=58).next_to(ar3,DOWN).shift((0.7)*LEFT+(0.7)*UP)
        self.play(Create(ar3), Write(comp))
        self.wait()
        form =  Tex(r"length$(T \circ \gamma ) = $ length$(\gamma )$", font_size=50).shift(3*DOWN+2*LEFT)
        box = SurroundingRectangle(form, buff = .2, color = BLUE)
        self.play(Write(form))
        self.wait()
        self.play(Create(box))
        self.wait()

class p4(Scene):
    def construct(self):        
        sp = ParametricFunction(lambda t : [t, 2* np.sin(t) - t/2 +1 ,0], t_range = [-PI,PI], color = BLUE)
        sp1 = ParametricFunction(lambda t : [t, 2* np.sin(t) - t/2 - np.sin(t)/2 +1,0], t_range = [-PI,PI], color = ORANGE)
        sp11 = sp1.copy()
        sp2 = ParametricFunction(lambda t : [t, 2* np.sin(t) - t/2+ np.sin(4*t)/4 +1,0], t_range = [-PI,PI], color = ORANGE)
        sp3 = ParametricFunction(lambda t : [t, 2* np.sin(t) - t/2 + np.sin(8*t)/8 +1,0], t_range = [-PI,PI], color = ORANGE)
        sp4 = ParametricFunction(lambda t : [t, 2* np.sin(t) - t/2 + np.sin(16*t)/16 +1 ,0], t_range = [-PI,PI], color = ORANGE)
        sp5 = ParametricFunction(lambda t : [t, 2* np.sin(t) - t/2 + np.sin(32*t)/32 +1,0], t_range = [-PI,PI], color = ORANGE)
        l0  = Tex(r"$\gamma$", font_size=58).next_to(sp.point_from_proportion(1/3),DOWN).shift(0.2*DOWN)
        l1  = Tex(r"$\gamma_1$", font_size=58).next_to(sp.point_from_proportion(2/3),UP).shift(0.2*UP)
        l11 = l1.copy()
        l2  = Tex(r"$\gamma_2$", font_size=58).next_to(sp.point_from_proportion(2/3),UP).shift(0.2*UP)
        l3  = Tex(r"$\gamma_3$", font_size=58).next_to(sp.point_from_proportion(2/3),UP).shift(0.2*UP)
        l4  = Tex(r"$\gamma_4$", font_size=58).next_to(sp.point_from_proportion(2/3),UP).shift(0.2*UP)
        l5  = Tex(r"$\gamma_5$", font_size=58).next_to(sp.point_from_proportion(2/3),UP).shift(0.2*UP)
        bx0 = SurroundingRectangle(l0, buff = .1, color = BLUE)
        bx1 = SurroundingRectangle(l1, buff = .1, color = ORANGE)
        self.play(Create(sp), Write(l0), Create(bx0))
        self.wait()
        self.play(Create(sp1), Write(l1), Create(bx1))
        self.wait()
        self.play(Transform(sp1,sp2),Transform(l1,l2))
        self.wait()
        self.play(Transform(sp1,sp3),Transform(l1,l3))
        self.wait()
        self.play(Transform(sp1,sp4),Transform(l1,l4))
        self.wait()
        self.play(Transform(sp1,sp5),Transform(l1,l5))
        self.wait()
        form =  Tex(r"length$( \gamma ) \leq  \liminf $ length$(\gamma _n)$", font_size=50).shift(3*DOWN)
        box1 = SurroundingRectangle(form, buff = .1, color = BLUE)
        box2 = SurroundingRectangle(form, buff = .2, color = ORANGE)
        self.play(Write(form))
        self.wait()
        self.play(Create(box1), Create(box2))
        self.wait()
        self.play(FadeOut(l1), FadeOut(sp1), FadeOut(bx1))
        self.wait()
        p00 = Dot(sp.point_from_proportion(0), color = YELLOW)
        p01 = Dot(sp.point_from_proportion(1/8), color = YELLOW)
        p02 = Dot(sp.point_from_proportion(1/4), color = YELLOW)
        p03 = Dot(sp.point_from_proportion(3/8), color = YELLOW)
        p04 = Dot(sp.point_from_proportion(1/2), color = YELLOW)
        p05 = Dot(sp.point_from_proportion(5/8), color = YELLOW)
        p06 = Dot(sp.point_from_proportion(3/4), color = YELLOW)
        p07 = Dot(sp.point_from_proportion(7/8), color = YELLOW)
        p08 = Dot(sp.point_from_proportion(1), color = YELLOW)
        p10 = Dot(sp11.point_from_proportion(0), color = YELLOW)
        p11 = Dot(sp11.point_from_proportion(1/8), color = YELLOW)
        p12 = Dot(sp11.point_from_proportion(1/4), color = YELLOW)
        p13 = Dot(sp11.point_from_proportion(3/8), color = YELLOW)
        p14 = Dot(sp11.point_from_proportion(1/2), color = YELLOW)
        p15 = Dot(sp11.point_from_proportion(5/8), color = YELLOW)
        p16 = Dot(sp11.point_from_proportion(3/4), color = YELLOW)
        p17 = Dot(sp11.point_from_proportion(7/8), color = YELLOW)
        p18 = Dot(sp11.point_from_proportion(1), color = YELLOW)
        p20 = Dot(sp2.point_from_proportion(0), color = YELLOW)
        p21 = Dot(sp2.point_from_proportion(1/8), color = YELLOW)
        p22 = Dot(sp2.point_from_proportion(1/4), color = YELLOW)
        p23 = Dot(sp2.point_from_proportion(3/8), color = YELLOW)
        p24 = Dot(sp2.point_from_proportion(1/2), color = YELLOW)
        p25 = Dot(sp2.point_from_proportion(5/8), color = YELLOW)
        p26 = Dot(sp2.point_from_proportion(3/4), color = YELLOW)
        p27 = Dot(sp2.point_from_proportion(7/8), color = YELLOW)
        p28 = Dot(sp2.point_from_proportion(1), color = YELLOW)
        p30 = Dot(sp3.point_from_proportion(0), color = YELLOW)
        p31 = Dot(sp3.point_from_proportion(1/8), color = YELLOW)
        p32 = Dot(sp3.point_from_proportion(1/4), color = YELLOW)
        p33 = Dot(sp3.point_from_proportion(3/8), color = YELLOW)
        p34 = Dot(sp3.point_from_proportion(1/2), color = YELLOW)
        p35 = Dot(sp3.point_from_proportion(5/8), color = YELLOW)
        p36 = Dot(sp3.point_from_proportion(3/4), color = YELLOW)
        p37 = Dot(sp3.point_from_proportion(7/8), color = YELLOW)
        p38 = Dot(sp3.point_from_proportion(1), color = YELLOW)
        p40 = Dot(sp4.point_from_proportion(0), color = YELLOW)
        p41 = Dot(sp4.point_from_proportion(1/8), color = YELLOW)
        p42 = Dot(sp4.point_from_proportion(1/4), color = YELLOW)
        p43 = Dot(sp4.point_from_proportion(3/8), color = YELLOW)
        p44 = Dot(sp4.point_from_proportion(1/2), color = YELLOW)
        p45 = Dot(sp4.point_from_proportion(5/8), color = YELLOW)
        p46 = Dot(sp4.point_from_proportion(3/4), color = YELLOW)
        p47 = Dot(sp4.point_from_proportion(7/8), color = YELLOW)
        p48 = Dot(sp4.point_from_proportion(1), color = YELLOW)
        p50 = Dot(sp5.point_from_proportion(0), color = YELLOW)
        p51 = Dot(sp5.point_from_proportion(1/8), color = YELLOW)
        p52 = Dot(sp5.point_from_proportion(1/4), color = YELLOW)
        p53 = Dot(sp5.point_from_proportion(3/8), color = YELLOW)
        p54 = Dot(sp5.point_from_proportion(1/2), color = YELLOW)
        p55 = Dot(sp5.point_from_proportion(5/8), color = YELLOW)
        p56 = Dot(sp5.point_from_proportion(3/4), color = YELLOW)
        p57 = Dot(sp5.point_from_proportion(7/8), color = YELLOW)
        p58 = Dot(sp5.point_from_proportion(1), color = YELLOW)
        self.play(FadeIn(p00), FadeIn(p01),FadeIn(p02),FadeIn(p03),FadeIn(p04),FadeIn(p05),FadeIn(p06),FadeIn(p07),FadeIn(p08))
        self.wait()
        self.play(Create(sp11), Write(l11), Create(bx1), Transform(p00,p10), Transform(p01,p11), Transform(p02,p12), Transform(p03,p13), Transform(p04,p14), Transform(p05,p15), Transform(p06,p16), Transform(p07,p17), Transform(p08,p18))
        self.wait()
        self.play(Transform(sp11,sp2),  Transform(l11,l2), Transform(p00,p20), Transform(p01,p21), Transform(p02,p22), Transform(p03,p23), Transform(p04,p24), Transform(p05,p25), Transform(p06,p26), Transform(p07,p27), Transform(p08,p28))
        self.wait()
        self.play(Transform(sp11,sp3), Transform(l11,l3), Transform(p00,p30), Transform(p01,p31), Transform(p02,p32), Transform(p03,p33), Transform(p04,p34), Transform(p05,p35), Transform(p06,p36), Transform(p07,p37), Transform(p08,p38))
        self.wait()
        self.play(Transform(sp11,sp4), Transform(l11,l4), Transform(p00,p40), Transform(p01,p41), Transform(p02,p42), Transform(p03,p43), Transform(p04,p44), Transform(p05,p45), Transform(p06,p46), Transform(p07,p47), Transform(p08,p48))
        self.wait()
        self.play(Transform(sp11,sp5), Transform(l11,l5), Transform(p00,p50), Transform(p01,p51), Transform(p02,p52), Transform(p03,p53), Transform(p04,p54), Transform(p05,p55), Transform(p06,p56), Transform(p07,p57), Transform(p08,p58))
        self.wait()
        all = Group(sp11, sp, p00, p01, p02, p03, p04, p05,p06, p07, p08, l0, l11, bx0, bx1, form, box1, box2)
        self.play(FadeOut(all))
        




class tech(Scene):
    def construct(self):
       prop = Tex("Properties of length", font_size=44).to_edge(UL)
       v0 = prop.get_left()[0]
       p0 = Tex(r"$\bullet$ ", r" length$(\gamma ) \geq \vert \gamma (b) - \gamma (a) \vert$ ", r", with equality if $\gamma$ is a line.", font_size=44).next_to(prop,DOWN).shift((0.5)*DOWN)
       p0.shift((v0 - p0.get_left()[0])*RIGHT)
       b0 = SurroundingRectangle(p0[1], buff = .1, color = RED)
       p1 = Tex(r"$\bullet$ ", r" length$(\gamma_1 ) = $ length$(\gamma_2)$", r" when $\gamma_1, \gamma_2$ are reparametrizations", font_size=44).next_to(p0,DOWN).shift((0.5)*DOWN)
       p11 = Tex(r"of each other.", font_size=44).next_to(p1,DOWN).shift((0.5)*RIGHT)
       p1.shift((v0 - p1.get_left()[0])*RIGHT)
       p11.shift((v0 - p11.get_left()[0]+1/2)*RIGHT)
       b1 = SurroundingRectangle(p1[1], buff = .1, color = YELLOW)
       p2 = Tex(r"$\bullet$ ", r" length$(\gamma_1 \ast \gamma_2 ) = $ length$(\gamma_1) + $ length$(\gamma _2)$ ", r" for concatenations.", font_size=44).next_to(p11,DOWN).shift((0.5)*DOWN)
       p2.shift((v0 - p2.get_left()[0])*RIGHT)
       p2[1].shift(0.1*RIGHT)
       p2[2].shift(0.2*RIGHT)
       b2 = SurroundingRectangle(p2[1], buff = .1, color = GREEN)
       b21 = SurroundingRectangle(p2[1], buff = .2, color = BLUE)
       p3 = Tex(r"$\bullet$ ", r" length$(T \circ \gamma ) = $ length$(\gamma) $ ", r" for $T$ any isometry.", font_size=44).next_to(p2,DOWN).shift((0.5)*DOWN)
       p3.shift((v0 - p3.get_left()[0])*RIGHT)
       b3 = SurroundingRectangle(p3[1], buff = .1, color = BLUE)
       p4 = Tex(r"$\bullet$ If $\gamma_n \to \gamma$ pointwise, ", r" length$( \gamma ) \leq  \liminf $ length$(\gamma_n) $ ", r" .", font_size=44).next_to(p3,DOWN).shift((0.5)*DOWN)
       p4.shift((v0 - p4.get_left()[0])*RIGHT)
       b4 = SurroundingRectangle(p4[1], buff = .1, color = ORANGE)
       self.play(Write(prop), Write(p0), Create(b0))
       self.wait()
       self.play(Write(p1),Write(p11), Create(b1))
       self.wait()
       self.play(Write(p2), Create(b2), Create(b21))
       self.wait()
       self.play(Write(p3), Create(b3))
       self.wait()
       self.play(Write(p4), Create(b4))
       self.wait()

class proof(Scene):
    def construct(self):  
        tip = Tex (r"Proof", font_size=44).to_edge(UL).set_color(LIGHT_PINK)
        v0 = tip.get_left()[0]
        need = Tex (r"We need to show that ", r" $\lambda (\gamma ) = $ length$(\gamma)$ ", r" for any curve $\gamma$.", font_size=44).next_to(tip, DOWN)
        need.shift((v0 - need.get_left()[0])*RIGHT)
        bf = SurroundingRectangle(need[1], buff = .1, color = LIGHT_PINK)
        p0 = Tex(r"Since ", r" $\lambda (\gamma ) = \vert \gamma (b) - \gamma (a) \vert$ ", r" when $\gamma$ is a line", font_size=44).next_to(need,DOWN).shift((0.4)*DOWN)
        p0.shift((v0 - p0.get_left()[0])*RIGHT)
        b0 = SurroundingRectangle(p0[1], buff = .1, color = RED)
        self.play(Write(tip),Write(need),Create(bf))# Write(p4), Create(b4), Write(p4c), Create(b4c)    )
        self.wait()
        T1 = Group(p0, b0)
        v1 = tip.get_top()[1] - p0.get_top()[1]
        p2 = Tex(r"and ", r" $ \lambda  (\gamma_1 \ast \gamma_2 ) = \lambda (\gamma_1) +  \lambda  (\gamma _2)$ ", r" for concatenations,", font_size=44).next_to(p0,DOWN).shift((0.2)*DOWN)
        p2.shift((v0 - p2.get_left()[0])*RIGHT)
        p2[1].shift(0.1*RIGHT)
        p2[2].shift(0.2*RIGHT)
        b2 = SurroundingRectangle(p2[1], buff = .1, color = GREEN)
        b21 = SurroundingRectangle(p2[1], buff = .2, color = BLUE)
        p2c = Tex( r" $\lambda ( L ) = $ length$ (L)$", r" for each broken line $L$.", font_size=44).next_to(p2,DOWN).shift((0.2)*DOWN)
        p2c.shift((v0 - p2c.get_left()[0])*RIGHT)
        b2c = SurroundingRectangle(p2c[0], buff = .1, color = LIGHT_PINK)
        T2 = Group(p2c, b2c)
        self.play(Write(p0),Create(b0), Create(b21),Write(p2),Create(b2))
        self.wait()
        self.play(Write(p2c), Create(b2c))
        self.wait()
        L1 = Line([-4.5,-3,0],[-3.5,-1,0]).append_points(Line([-3.5,-1,0],[-1.5,-3,0]).points).append_points(Line([-1.5,-3,0],[-0.5,-1,0]).points).append_points(Line([-0.5,-1,0], [1.5,-3,0]).points).append_points(Line([1.5,-3,0], [2.5,-1,0]).points).append_points(Line([2.5,-1,0], [4.5,-3,0]).points).set_color(GREEN)
        L1.shift(0.2*DOWN)
        self.play(Create(L1))
        self.wait()
        v1 = tip.get_top()[1] - p2.get_top()[1]
        self.play(FadeOut(T1), FadeOut(p2), FadeOut(b21), FadeOut(b2), T2.animate.shift(v1*UP), FadeOut(tip),FadeOut(need),FadeOut(bf))
        self.wait()
        self.play(FadeOut(L1))
        self.wait()
        p4 = Tex(r"Since whenever  $\gamma_n \to \gamma$ pointwise, ", r" $\lambda ( \gamma ) \leq  \liminf  \lambda (\gamma_n) $ ", r" ,", font_size=44).next_to(p2c,DOWN).shift((0.2)*DOWN)
        p4.shift((v0 - p4.get_left()[0])*RIGHT)
        b4 = SurroundingRectangle(p4[1], buff = .1, color = ORANGE)
        p4c = Tex( r" $\lambda ( \gamma ) \leq $ length$ ( \gamma )$", r" for any curve $\gamma $.", font_size=44).next_to(p4,DOWN).shift((0.2)*DOWN)
        p4c.shift((v0 - p4c.get_left()[0])*RIGHT)
        b4c = SurroundingRectangle(p4c[0], buff = .1, color = LIGHT_PINK)
        T4 = Group(p4,b4,p4c,b4c)
        self.play(Write(p4), Write(p4c), Create(b4), Create(b4c))
        self.wait()
        sp = ParametricFunction(lambda t : [(2.5)*t,(t-2)*t*(t+2)/3+t/(1.5)-2,0], t_range = [-2,2], color = BLUE)
        l1 = Line(sp.get_start(), sp.get_end(), color = ORANGE) 
        l3 = Line(sp.get_start(), sp.point_from_proportion(1/3)).append_points(Line( sp.point_from_proportion(1/3),  sp.point_from_proportion(2/3)).points)
        l3.append_points(Line( sp.point_from_proportion(2/3),  sp.point_from_proportion(1)).points).set_color(ORANGE)
        l4 = Line(sp.get_start(), sp.point_from_proportion(0.25)).append_points(Line( sp.point_from_proportion(0.25),  sp.point_from_proportion(0.5)).points).append_points(Line( sp.point_from_proportion(0.5),  sp.point_from_proportion(0.75)).points).append_points(Line( sp.point_from_proportion(0.75),  sp.point_from_proportion(1)).points)
        l4.set_color(ORANGE)
        l6 = Line(sp.get_start(), sp.point_from_proportion(1/6)).append_points(Line( sp.point_from_proportion(1/6),  sp.point_from_proportion(1/3)).points)
        l6.append_points(Line( sp.point_from_proportion(1/3),  sp.point_from_proportion(0.5)).points).append_points(Line( sp.point_from_proportion(0.5),  sp.point_from_proportion(2/3)).points)
        l6.append_points(Line( sp.point_from_proportion(2/3),  sp.point_from_proportion(5/6)).points).append_points(Line( sp.point_from_proportion(5/6),  sp.point_from_proportion(1)).points)
        l6.set_color(ORANGE)
        l9 = Line(sp.get_start(), sp.point_from_proportion(1/9)).append_points(Line( sp.point_from_proportion(1/9),  sp.point_from_proportion(2/9)).points)
        l9.append_points(Line( sp.point_from_proportion(2/9),  sp.point_from_proportion(1/3)).points)
        l9.append_points(Line( sp.point_from_proportion(1/3),  sp.point_from_proportion(4/9)).points)
        l9.append_points(Line( sp.point_from_proportion(4/9),  sp.point_from_proportion(5/9)).points)
        l9.append_points(Line( sp.point_from_proportion(5/9),  sp.point_from_proportion(2/3)).points)
        l9.append_points(Line( sp.point_from_proportion(2/3),  sp.point_from_proportion(7/9)).points)
        l9.append_points(Line( sp.point_from_proportion(7/9),  sp.point_from_proportion(8/9)).points)
        l9.append_points(Line( sp.point_from_proportion(8/9),  sp.point_from_proportion(1)).points).set_color(ORANGE)
        self.play(Create(sp))
        self.wait()
        self.play(Create(l1))
        self.wait()
        self.play(Transform(l1,l3))
        self.wait()
        self.play(Transform(l1,l4))
        self.wait()
        self.play(Transform(l1,l6))
        self.wait()
        self.play(Transform(l1,l9))
        self.wait()
        self.play(FadeOut(l1), FadeOut(sp), FadeOut(T4) , FadeOut(T2))



class pf1(Scene):
    def construct(self):  
        need = Tex (r"We need to show that ", r" $\lambda (\gamma ) \geq $ length$(\gamma)$ ", r" for any curve $\gamma$.", font_size=44).to_edge(UL)
        bf = SurroundingRectangle(need[1], buff = .1, color = LIGHT_PINK)
        self.play(Write(need), Create(bf))
        sp1 = ParametricFunction(lambda t : [(2)*t,(t-2)*t*(t+2)/2+t-1/2,0], t_range = [-2,-1.2], color = BLUE)
        sp2 = ParametricFunction(lambda t : [(2)*t,(t-2)*t*(t+2)/2+t-1/2,0], t_range = [-1.2,-0.4], color = BLUE)
        sp3 = ParametricFunction(lambda t : [(2)*t,(t-2)*t*(t+2)/2+t-1/2,0], t_range = [-0.4,0.4], color = BLUE)
        sp4 = ParametricFunction(lambda t : [(2)*t,(t-2)*t*(t+2)/2+t-1/2,0], t_range = [0.4,1.2], color = BLUE)
        sp5 = ParametricFunction(lambda t : [(2)*t,(t-2)*t*(t+2)/2+t-1/2,0], t_range = [1.2,2], color = BLUE)
        sp = Group(sp1, sp2, sp3, sp4, sp5)
        self.play(FadeIn(sp))
        self.wait()
        self.play(Rotate(sp1, -PI/2, about_point = sp1.get_end()), Rotate(sp2, PI/12, about_point = [4,-4,0]), Rotate(sp3, -PI/24, about_point = [8,-2,0]) , Rotate(sp4, -PI/3, about_point = [0.5,-2,0]), Rotate(sp5, PI/6, about_point = [5,2.5,0])   )
        self.wait()
        t32 = sp3.get_end()-sp2.get_start()
        t25 = sp2.get_end()-sp5.get_start()
        t51 = sp5.get_end()-sp1.get_start()
        t14 = sp1.get_end()-sp4.get_start()
        self.play(sp3.animate.shift((2.5)*LEFT+2*DOWN), sp2.animate.shift( t32 +(2.5)* LEFT + 2*DOWN),sp5.animate.shift(t25 + t32 +(2.5)* LEFT + 2*DOWN) , sp1.animate.shift(t51 + t25 + t32 +(2.5)* LEFT + 2*DOWN), sp4.animate.shift(t14 + t51 + t25 + t32 + (2.5)*LEFT + 2*DOWN) )
        self.wait()
        self.play(FadeOut(sp))


class pf2(Scene):
    def construct(self):  
        need = Tex (r"We need to show that ", r" $\lambda (\gamma ) \geq $ length$(\gamma)$ ", r" for any curve $\gamma$.", font_size=44).to_edge(UL)
        bf = SurroundingRectangle(need[1], buff = .1, color = LIGHT_PINK)
        self.add(need,bf)
        sp1 = ParametricFunction(lambda t : [t,(t-2)*t*(t+2)/4+t/2,0], t_range = [-2,-1], color = BLUE)
        sp2 = ParametricFunction(lambda t : [t,(t-2)*t*(t+2)/4+t/2,0], t_range = [-1,0], color = BLUE)
        sp3 = ParametricFunction(lambda t : [t,(t-2)*t*(t+2)/4+t/2,0], t_range = [0,1], color = BLUE)
        sp4 = ParametricFunction(lambda t : [t,(t-2)*t*(t+2)/4+t/2,0], t_range = [1,2], color = BLUE)
        sp = Group(sp1, sp2, sp3, sp4)
        l1 = Line(sp1.get_start(), sp1.get_end(), color=ORANGE)
        l2 = Line(sp2.get_start(), sp2.get_end(), color=ORANGE)
        l3 = Line(sp3.get_start(), sp3.get_end(), color=ORANGE)
        l4 = Line(sp4.get_start(), sp4.get_end(), color=ORANGE)
        self.play(FadeIn(sp))
        self.wait()
        self.play(Create(l1), Create(l2), Create(l3), Create(l4))
        self.wait()
        a1 = Angle(l1, Line(sp1.get_start(), sp1.get_start()+RIGHT), other_angle = True)
        a2 = Angle(l2, Line(sp2.get_start(), sp2.get_start()+RIGHT))
        a3 = Angle(l3, Line(sp3.get_start(), sp3.get_start()+RIGHT))
        a4 = Angle(l4, Line(sp4.get_start(), sp4.get_start()+RIGHT), other_angle = True)
        self.play(Rotate(sp1,a1.get_value(),about_point = sp1.get_start()), Rotate(l1,a1.get_value(),about_point = l1.get_start()), Rotate(sp2,a2.get_value(),about_point = sp2.get_start()), Rotate(l2,a2.get_value(),about_point = l2.get_start()), Rotate(sp3,a3.get_value(),about_point = sp3.get_start()), Rotate(l3,a3.get_value(),about_point = l3.get_start()), Rotate(sp4,a4.get_value(),about_point = sp4.get_start()), Rotate(l4,a4.get_value(),about_point = l4.get_start()))
        self.wait()
        p1 = Group(sp1, l1)
        p2 = Group(sp2, l2)
        p3 = Group(sp3, l3)
        p4 = Group(sp4, l4)
        t12 = l1.get_end()-l2.get_start()
        t23 = l2.get_end()-l3.get_start()
        t34 = l3.get_end()-l4.get_start()
        s2 = t12
        s3 = s2 + t23
        s4 = s3 + t34
        self.play( p1.animate.shift((0.5)*LEFT), p2.animate.shift(s2+(0.5)*LEFT),p3.animate.shift(s3+(0.5)*LEFT) , p4.animate.shift(s4+(0.5)*LEFT) )
        self.wait()
        self.play(FadeOut(p1), FadeOut(p2), FadeOut(p3), FadeOut(p4))






class pf3n(Scene):
    def construct(self):  
        need = Tex (r"We need to show that ", r" $\lambda (\gamma ) \geq $ length$(\gamma)$ ", r" for any curve $\gamma$.", font_size=44).to_edge(UL)
        bf = SurroundingRectangle(need[1], buff = .1, color = LIGHT_PINK)
        self.add(need,bf)
        sp1 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2,-2 + 4/9], color = BLUE)
        sp2 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2 + 4/9, -2 + 8/9], color = BLUE)
        sp3 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2 + 8/9,-2 + 12/9], color = BLUE)
        sp4 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2 + 12/9,-2 + 16/9], color = BLUE)
        sp5 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2 + 16/9, -2 + 20/9], color = BLUE)
        sp6 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2 + 20/9,-2 + 24/9], color = BLUE)
        sp7 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2 + 24/9,-2 + 28/9], color = BLUE)
        sp8 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2 + 28/9,-2 + 32/9], color = BLUE)
        sp9 = ParametricFunction(lambda t : [(1.5)*t,(t-2)*t*(t+2)/3+t/(1.5),0], t_range = [-2 + 32/9,-2 + 36/9], color = BLUE)
        sp = Group(sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8, sp9)
        l1 = Line(sp1.get_start(), sp1.get_end(), color=ORANGE)
        l2 = Line(sp2.get_start(), sp2.get_end(), color=ORANGE)
        l3 = Line(sp3.get_start(), sp3.get_end(), color=ORANGE)
        l4 = Line(sp4.get_start(), sp4.get_end(), color=ORANGE)
        l5 = Line(sp5.get_start(), sp5.get_end(), color=ORANGE)
        l6 = Line(sp6.get_start(), sp6.get_end(), color=ORANGE)
        l7 = Line(sp7.get_start(), sp7.get_end(), color=ORANGE)
        l8 = Line(sp8.get_start(), sp8.get_end(), color=ORANGE)
        l9 = Line(sp9.get_start(), sp9.get_end(), color=ORANGE)
        self.play(FadeIn(sp))
        self.wait()
        self.play(Create(l1), Create(l2), Create(l3), Create(l4), Create(l5), Create(l6), Create(l7), Create(l8), Create(l9))
        self.wait()
        a1 = Angle(l1, Line(sp1.get_start(), sp1.get_start()+RIGHT), other_angle = True)
        a2 = Angle(l2, Line(sp2.get_start(), sp2.get_start()+RIGHT), other_angle = True)
        a3 = Angle(l3, Line(sp3.get_start(), sp3.get_start()+RIGHT), other_angle = True)
        a4 = Angle(l4, Line(sp4.get_start(), sp4.get_start()+RIGHT))
        a5 = Angle(l5, Line(sp5.get_start(), sp5.get_start()+RIGHT))
        a6 = Angle(l6, Line(sp6.get_start(), sp6.get_start()+RIGHT))
        a7 = Angle(l7, Line(sp7.get_start(), sp7.get_start()+RIGHT), other_angle = True)
        a8 = Angle(l8, Line(sp8.get_start(), sp8.get_start()+RIGHT), other_angle = True)
        a9 = Angle(l9, Line(sp9.get_start(), sp9.get_start()+RIGHT), other_angle = True)
        p1 = Group(sp1, l1)
        p2 = Group(sp2, l2)
        p3 = Group(sp3, l3)
        p4 = Group(sp4, l4)
        p5 = Group(sp5, l5)
        p6 = Group(sp6, l6)
        p7 = Group(sp7, l7)
        p8 = Group(sp8, l8)
        p9 = Group(sp9, l9)
        self.play(Rotate(p1,a1.get_value(),about_point = sp1.get_start()),Rotate(p2,a2.get_value(),about_point = sp2.get_start()), Rotate(p3,a3.get_value(),about_point = sp3.get_start()), Rotate(p4,a4.get_value(),about_point = sp4.get_start()), Rotate(p5,a5.get_value(),about_point = sp5.get_start()) , Rotate(p6,a6.get_value(),about_point = sp6.get_start()) , Rotate(p7,a7.get_value(),about_point = sp7.get_start()), Rotate(p8,a8.get_value(),about_point = sp8.get_start()) , Rotate(p9,a9.get_value(),about_point = sp9.get_start())             )
        self.wait()
        t12 = l1.get_end()-l2.get_start()
        t23 = l2.get_end()-l3.get_start()
        t34 = l3.get_end()-l4.get_start()
        t45 = l4.get_end()-l5.get_start()
        t56 = l5.get_end()-l6.get_start()
        t67 = l6.get_end()-l7.get_start()
        t78 = l7.get_end()-l8.get_start()
        t89 = l8.get_end()-l9.get_start()
        s2 = t12
        s3 = s2 + t23
        s4 = s3 + t34
        s5 = s4 + t45
        s6 = s5 + t56
        s7 = s6 + t67
        s8 = s7 + t78
        s9 = s8 + t89
        self.play( p1.animate.shift((0.5)*LEFT+UP), p2.animate.shift(s2+(0.5)*LEFT+UP),p3.animate.shift(s3+(0.5)*LEFT+UP) , p4.animate.shift(s4+(0.5)*LEFT+UP) , p5.animate.shift(s5+(0.5)*LEFT+UP), p6.animate.shift(s6+(0.5)*LEFT+UP) , p7.animate.shift(s7+(0.5)*LEFT+UP), p8.animate.shift(s8+(0.5)*LEFT+UP) , p9.animate.shift(s9+(0.5)*LEFT+UP)     )
        self.wait()
        form =  Tex(r"$ \lambda(\gamma)$", r"$ =$", r"$ \lim \lambda (\alpha_i )$", r"$\geq  \lambda ( L)  = $", r" length$ ( L) $", font_size=44).shift((2.5)*DOWN)
        form[0].shift((0.1)*LEFT)
        form[4].shift((0.1)*RIGHT)
        box = SurroundingRectangle(form[0], buff = .1, color = BLUE)
        box2 = SurroundingRectangle(form[4], buff = .1, color = ORANGE)
        self.play(Write(form))
        self.wait()
        self.play(Create(box), Create(box2))
        self.wait()
        pall = Group(p1,p2,p3,p4,p5,p6,p7,p8,p9)
        pfor = Group(box, box2, form)
        self.play(pall.animate.shift((1.5)*UP), pfor.animate.shift(2*UP))
        self.wait()
        ff = Tex(r"$ \lambda (\gamma)=$ length$(\gamma )$", font_size=44).shift((2.5)*DOWN)
        bff =  SurroundingRectangle(ff, buff = .1, color = LIGHT_PINK)
        self.play(Create(bff), Write(ff))
        self.wait()
        self.play(FadeOut(pall), FadeOut(pfor), FadeOut(ff), FadeOut(bf), FadeOut(need), FadeOut(bff))
        self.wait()   
        

class arcl(Scene):
    def construct(self):  
        alp = Tex(r"Arc Length Parametrization", font_size=50, color = ORANGE).to_edge(UL)
        g = Tex(r"$\gamma : [a,b] \to \mathbb{R}^2$", font_size = 44).shift((2.5)*UP)
        dom = Line([-4.5,1.2, 0], [-1.5,1.2, 0], color = BLUE).set_height(0.2)
        d0 = Line([-4.5,1.1,0], [-4.5,1.3,0], color = BLUE)
        a = Tex(r"$a$",font_size = 44 ).next_to(d0, UP)
        d1 = Line([-1.5,1.1,0], [-1.5,1.3,0], color = BLUE)
        b = Tex(r"$b$",font_size = 44 ).next_to(d1, UP)
        ar = Arrow( [-1,1.2,0],[1,1.2,0] , tip_length = 0.2)
        inter = Group(dom, d0, d1)
        interv = Group(dom, d0, d1, a, b)
        interval = interv.copy().shift((0.8)*DOWN+LEFT)
        doma = Group(dom, d0, d1, a, b, ar )
        domain = doma.copy().shift(3.5*DOWN)
        gam = Tex(r"$\gamma$",font_size = 44 ).next_to(ar, UP)
        ell = Tex(r"$\ell$",font_size = 44 ).next_to(domain[5], UP)
        domain.add(ell)
        sp = ParametricFunction(lambda t : [t+3.2,(t-2)*t*(t+2)/8+t/4+1.2,0], t_range = [-2,2], color = BLUE)
        spp = ParametricFunction(lambda t : [t+3.2,(t-2)*t*(t+2)/8+t/4+1.2,0], t_range = [-2,-2/3], color = YELLOW)
        lf = Tex(r"$\ell : [a,b] \to [0, \infty ]$", font_size = 44)#.shift(2*DOWN)
        lfd = Tex(r"$\ell (t) : = $ length$(\gamma  \vert_{[a,t]})$", font_size = 44).next_to(lf, DOWN)
        self.play(Write(alp))
        self.wait()
        self.play(Write(g), Create(sp), Create(dom), Create(d0), Create(d1), Create(ar), Write(gam), Write(a), Write(b))
        self.wait()
        self.play(Write(lf), Write(lfd))
        self.wait()
        self.play(FadeIn(domain))
        self.wait()
        t = Tex(r"$t$",font_size = 44 ).next_to(domain[0].point_from_proportion(1/3), UP).shift(0.1*UP)
        tick = domain[2].copy().shift(2*LEFT).set_color(YELLOW)
        self.play(Write(t), Create(tick))
        self.wait()
        yb = Line([-4.5,-2.3, 0], [-3.5,-2.3, 0], color = YELLOW).set_height(0.2)
        yb0 = domain[1].copy().set_color(YELLOW)
        self.play(Create(yb), Create(yb0))
        self.wait()
        newy0 = yb0.copy().move_to(spp.get_start()).rotate(PI/4)
        newy1 = yb0.copy().move_to(spp.get_end()).rotate(-PI/40)
        gt = Tex(r"$\gamma (t)$",font_size = 44 ).next_to(newy1, UP)
        self.play(Transform(yb, spp), Transform(tick, newy1), Transform(yb0, newy0), Transform(t,gt))
        self.wait()   
        cod = Line([1.5,-2.3, 0], [3.1,-2.3, 0], color = YELLOW).set_height(0.2)
        c0 = Line([1.5,-2.4,0], [1.5,-2.2,0], color = YELLOW)
        c1 = Line([3.1,-2.4,0], [3.1,-2.2,0], color = YELLOW)
        ellt = Tex(r"$\ell (t)$",font_size = 44 ).next_to(c1, UP)
        self.play(Transform(yb,cod), Transform(tick, c1), Transform(yb0,c0), Transform(t, ellt))        
        self.wait()
        codf = Line( [0.7,-2.3,0], [5.5,-2.3,0], color = BLUE).set_height(0.2)
        tickf = tick.copy().set_color(BLUE).shift(2.4*RIGHT)
        bb0 = yb0.copy().set_color(BLUE).shift(0.8*LEFT)
        ella = Tex(r"$\ell (a)$",font_size = 44 ).next_to(bb0, UP) 
        ellb = Tex(r"$\ell (b)$",font_size = 44 ).next_to(tickf, UP)
        self.play(Transform(yb, codf), Transform(tick, tickf), Transform(yb0, bb0), Transform(t, ellb), Write(ella), domain.animate.shift((0.7)*LEFT))
        codomain = Group(yb,tick, yb0, t, ella)
        self.wait()
        ellasd = Tex(r"$0$",font_size = 44 ).next_to(bb0, UP) 
        ellbsd = Tex(r"length$( \gamma)$",font_size = 44 ).next_to(tickf, UP)
        self.play(Transform(ella, ellasd), Transform(t, ellbsd))
        self.wait()
        linvar = CurvedArrow( [0,-2.6,0],[-1.45,-2.6,0], radius = -3 , tip_length = 0.2)
        linv = Tex(r"$\ell ^{-1}$",font_size = 44 ).next_to(linvar, DOWN)
        self.play(Create(linvar), Write(linv))
        self.wait()
        linvarf = Arrow([0.5,-1.2, 0], [-2,0.1, 0])
        gamarf = Arrow([-2, 0.7, 0], [0.5, 2, 0])
        self.play(FadeOut(lf), FadeOut(lfd),FadeOut(g), codomain.animate.shift(UP) , sp.animate.shift(UP), FadeOut(domain[5]), FadeOut(ell),  Transform(linvar ,linvarf),Transform(ar, gamarf), linv.animate.move_to([-0.9,-1,0 ]) , gam.animate.move_to([-0.9,1.7,0 ]),  Transform(dom, interval[0]), Transform(d0, interval[1]), Transform(d1, interval[2]), Transform(a,interval[3]), Transform(b, interval[4]), Transform(domain[0], interval[0]), Transform(domain[1], interval[1]), Transform(domain[2], interval[2]), Transform(domain[3], interval[3]), Transform(domain[4], interval[4]))
        self.wait()
        arclp = Arrow([2.1,-0.8, 0], [2.1,1.6,0], color=ORANGE)
        arclpl = Tex(r"$\alpha : = \gamma \circ \ell^{-1}$",font_size = 44 ).next_to(arclp, RIGHT)
        box =  SurroundingRectangle(arclpl, buff = .1, color = ORANGE)
        self.play(Create(arclp), Write(arclpl), Create(box))
        self.wait()
        concl1 = Tex(r"For all $0 \leq s < t \leq $ length$(\gamma)$,",font_size = 44 ).to_edge(UL).shift(5.5*DOWN+(0.5)*RIGHT)
        concl2 = Tex(r"length$\left(\alpha \vert_{[s,t] }\right) = t-s$,",font_size = 44 ).next_to(concl1, DOWN)
        conclussion = Group(concl1, concl2)
        box2 =  SurroundingRectangle(conclussion, buff = .1, color = ORANGE)
        self.play(Write(concl1), Write(concl2),  Create(box2))
        self.wait()



class theor(Scene):
    def construct(self):
       prop = Tex("Theorem", font_size=60, color = LIGHT_PINK).to_edge(UL).shift(RIGHT)
       v0 = prop.get_left()[0]
       intro = Tex(r"Let $\lambda : \{ Curves \} \to \mathbb{R} \cup \{ \infty \}$ satisfy the following properties", font_size=40).next_to(prop,DOWN).shift((0.1)*DOWN)
       intro.shift((v0 - intro.get_left()[0])*RIGHT)
       p0 = Tex(r"$\bullet$ If $\gamma$ is a line, ", r" $\lambda (\gamma ) = \vert \gamma (b) - \gamma (a) \vert$ ", r" .", font_size=40).next_to(intro,DOWN).shift((0.2)*DOWN)
       p0.shift((v0 - p0.get_left()[0])*RIGHT)
       b0 = SurroundingRectangle(p0[1], buff = .1, color = RED)
       p1 = Tex(r"$\bullet$ ", r"$ \lambda (\gamma_1 ) = \lambda (\gamma_2)$", r" when $\gamma_1, \gamma_2$ are reparametrizations", font_size=40).next_to(p0,DOWN).shift((0.1)*DOWN)
       p11 = Tex(r"of each other.", font_size=44).next_to(p1,DOWN).shift((0.5)*RIGHT)
       p1.shift((v0 - p1.get_left()[0])*RIGHT)
       p11.shift((v0 - p11.get_left()[0]+1/2)*RIGHT)
       b1 = SurroundingRectangle(p1[1], buff = .1, color = YELLOW)
       p2 = Tex(r"$\bullet$ ", r" $\lambda (\gamma_1 \ast \gamma_2 ) = \lambda (\gamma_1) +  \lambda (\gamma _2)$ ", r" for concatenations.", font_size=40).next_to(p11,DOWN).shift((0.1)*DOWN)
       p2.shift((v0 - p2.get_left()[0])*RIGHT)
       p2[1].shift(0.1*RIGHT)
       p2[2].shift(0.2*RIGHT)
       b2 = SurroundingRectangle(p2[1], buff = .1, color = GREEN)
       b21 = SurroundingRectangle(p2[1], buff = .2, color = BLUE)
       p3 = Tex(r"$\bullet$ ", r"$ \lambda (T \circ \gamma ) = \lambda (\gamma) $ ", r" for $T$ any isometry.", font_size=40).next_to(p2,DOWN).shift((0.1)*DOWN)
       p3.shift((v0 - p3.get_left()[0])*RIGHT)
       b3 = SurroundingRectangle(p3[1], buff = .1, color = BLUE)
       p4 = Tex(r"$\bullet$ If $\gamma_n \to \gamma$ pointwise, ", r" $ \lambda( \gamma ) \leq  \liminf  \lambda (\gamma_n) $ ", r" .", font_size=40).next_to(p3,DOWN).shift((0.1)*DOWN)
       p4.shift((v0 - p4.get_left()[0])*RIGHT)
       b4 = SurroundingRectangle(p4[1], buff = .1, color = ORANGE)
       con = Tex(r"Then ", r"$ \lambda (\gamma ) = $ length$(\gamma )$", r" for all curve $\gamma$.", font_size=40).next_to(p4,DOWN).shift((0.2)*DOWN)
       con.shift((v0 - con.get_left()[0])*RIGHT)
       bf = SurroundingRectangle(con[1], buff = .1, color = LIGHT_PINK)
       self.play(Write(prop),Write(intro), Write(p0), Create(b0), Write(p1),Write(p11), Create(b1), Write(p2), Create(b2), Create(b21), Write(p3), Create(b3),Write(p4), Create(b4), Write(con), Create(bf) )
       self.wait()